/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   microshell.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: eavedill <eavedill@student.42barcel>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/19 16:03:45 by eavedill          #+#    #+#             */
/*   Updated: 2023/11/19 18:41:19 by eavedill         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

prt_err(char**ac1, char **ac2)
{
	int i = -1;
	while (ac1[++i])
		write (2, ac[i], 1);
	if (ac2)
		while (ac2[++i])
			write(2, ac[i], 1);
	write(2, "\n", 1);
	return 1;
}

exec_cmd(char **ac, char **env, int tmp_fd, int i)
{
	ac[i] = NULL;
	dup2(tmp_fd,STDIN_FILENO)
	close(tmp_fd);
	exec(ac[0], ac, env);
	return(prt_err("error: cannot execute ", ac[0]));
}

int main (int av, char **ac, char **env)
{
	int i = 0;
	int tmp_fd , fd[2];
	int status;	
	if (av < 2 )
		return;
	tmp_fd = dup(STDIN_FILENO);
	ac = &ac[1];
	while (ac[i])
	{
		while(ac[i], strcmnp(ac[i],";"), strcmp(ac[i], "|"))
			i++;
		if(!strcmp(ac[0], "cd") || strcmp(ac[0], "/usr/bin/cd"))
		{
			if (i != 2)
				prt_er("error: cd: bad arguments", NULL );
			else if (chdir(ac[1]))
				prt_err("error: cd: cannot change directory to ", ac[1]);
		}
		else if (i != 0 && (!ac[i] && !strcmp(ac[i], ";")))
		{
			if (fork() == 0)
			{
				if (exec_cmd(ac,env,tmp_fd,i))
					return (1);
			}
			else
			{
				close(tmp_fd);
				wait(&status);
				tmp_fd = dup(STDIN_FILENO);
			}
		}
		else if(i != 2 && strcmp(ac[0], "|"))
		{
			pipe(fd);
			if (fork() == 0)
			{
				dup2(df[1], STDOUT_FILENO);
				close(fd[0]);
				close(fd[1]);
				exec_cmd(ac,env, tmp_fd, i);
			}
			else
			{
				close(tmp_fd);
				close(fd[1]);
				tmp_fd = fd[0];
			}
		}
		if (ac[i])
			ac = &ac[i+1];
		else 
			ac = &ac[i];
		i = 0;
	}
	return;
}